#!/bin/sh

# This variable declaration occurrs in three places: genmaster, ugenmaster, and ${REPO_DIR}/conf/settings.sh
REPO_DIR="/home/jake/programming/repos/notes"

# Pull in configuration settings in ${REPO_DIR}/conf/settings.sh
# Source file that contains definitions for NOTES_DIR and UNIT_BLACKLIST
if [ -r "${REPO_DIR}/conf/settings.sh" ]; then
	source "${REPO_DIR}/conf/settings.sh"
else
	echo "ERROR: Could not locate configuration settings at ${REPO_DIR}/conf/settings.sh"
	echo "Is \$REPO_DIR set correctly in this script?"
	exit -1
fi

USAGE() {
	echo "Incorrect usage."
	echo "usage: genmaster <PATH_TO_UNIT> [--force]"
}

# This script can take one or two parameters: a mandatory unit, and an optional
# --force option.  Ensure that this is the case
if [ "$#" -ne 1 ] && [ "$#" -ne 2 ]; then
	USAGE
	exit -1
fi


FORCE=0 # This is zero by default, because the default behavior is to not force a rebuild

# Now that we know there are 1 or two parameters, loop through them
for parameter in "$@"
do
	if [ "$parameter" == "--force" ]; then
		FORCE=1
	else
		# Since parameter is not our force option, it must be specifying our directory
		DIR="$parameter"
	fi
done

# If $DIR was never given a value, then the user didn't pass a directory; Throw error
if [ -z "$DIR" ]; then
	echo "ERROR: No directory was passed. Quitting."
	exit -1
fi

# If directory doesn't exist, quit
if [ ! -d "$DIR" ]; then
	USAGE
	echo "ERROR: directory does not exist. Quitting."
	echo "$DIR"
	exit -1
fi

DIR="`cd "$DIR"; pwd`" # The extra shell is for the case where the parameter is a relative path; this will turn it into an absolute path

# If directory exists on $UNIT_BLACKLIST, quit
for blacklisted_directory_regex in "${UNIT_BLACKLIST[@]}"; do
	if echo "$DIR" | grep -q -E "$blacklisted_directory_regex"; then
		echo "Unit provided appears on \$UNIT_BLACKLIST.  Quitting."
		exit -1
	fi
done


# Populate a variable $files with all the markdown files in the directory(excluding master.md)
# Then, if $files is null, quit
files="`find "$DIR" -maxdepth 1 -not -name "master.md" -a -name "*.md" -a -not -name "*.swp" 2> /dev/null | sort`"
if [ -z "$files" ]; then
	echo "Directory does not contain markdown files. Quitting."
	exit -1
fi


# Now, we know for sure that the directory actually exists and that it contains user-created markdown files
# Time to compile them!

# Initialize /tmp
tmp="/tmp/notes-${$}" # ${$} is just the process ID
mkdir -p "$tmp"
echo "" > "${tmp}/master.md"

# Create a backup of the directory in case something goes wrong
cp -R "$DIR" "${tmp}/backup" 2> /dev/null

echo "Processing ${DIR}..."

# If a user-provided separator is present(in "${DIR}/.separator"), copy that to ${tmp}/separator.md.
# If not, just copy the default separator at ${REPO_DIR}/conf/separator.md to ${tmp/separator.md
if [ -f "${DIR}/.separator" ]; then
	cp "${DIR}/.separator" "${tmp}/separator.md"
else
	cp "${REPO_DIR}/conf/separator.md" "${tmp}/separator.md"
fi

# Populate separatorLength; we'll need it later
separatorLength=`cat "${tmp}/separator.md" | wc -l`


## Compile master.md in /tmp ##
IFS="
"
for file in $files
do	
	echo "# `basename "$file" .md`" >> "${tmp}/master.md"
	echo "" >> "${tmp}/master.md"
	cat "$file" >> "${tmp}/master.md"
	cat "${tmp}/separator.md" >> "${tmp}/master.md"
done
# Now, master.md is built but it has one extra empty line at the beggining and $separatorLength lines of separator at the end
# We need to delete those lines
sed -i '1d' "${tmp}/master.md"
for i in $(seq 1 $separatorLength)
do
	sed -i '$d' "${tmp}/master.md"
done

# Okay, master.md is fully built
# Now, we need to check if the unit warrants an update
if [ ! -f "${DIR}/master.md" ] || [ ! -z "`diff "${DIR}/master.md" "${tmp}/master.md"`" ] || [ $FORCE -eq 1 ]; then
	echo "   Generating master document..."
	pandocResult="`cd "$DIR"; pandoc -s -f markdown -o "${tmp}/master.pdf" --pdf-engine=pdflatex "${tmp}/master.md" 2>&1`"
	if [ -n "$pandocResult" ]; then
		echo "ERROR: Pandoc failed to generate master pdf.  Unit directory has not been changed."
		echo "$pandocResult"
		rm -R "$tmp"
		exit -1
	fi
	cp "${tmp}/master.md" "${DIR}/master.md"
	cp "${tmp}/master.pdf" "${DIR}/master.pdf"
fi

rm -R "$tmp"
