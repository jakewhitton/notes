#!/bin/sh

REPO_DIR="/home/jake/notes"

# If the number of parameters passed is not equal to one, quit
if [ $# -ne 1 ]; then
	echo "Incorrect usage."
	echo "usage: genmaster <PATH_TO_UNIT>"
	exit -1
fi

DIR="`cd "$1"; pwd`" # The extra shell is for the case where the parameter is a relative path; this will turn it into an absolute path

# If directory doesn't exist, quit
if [ ! -d "$DIR" ]; then
	echo "ERROR: directory does not exist. Quitting."
	echo "$DIR"
	exit -1
fi

# Populate a variable $files with all the markdown files in the directory(excluding master.md)
# Then, if $files is null, quit
files="`find "${DIR}" -maxdepth 1 -not -name "master.md" -a -name "*.md" 2> /dev/null | sort`"


if [ -z "$files" ]; then
	echo "Directory does not contain markdown files. Quitting."
	exit -1
fi

echo "Processing ${DIR}..."

# Now, we know for sure that the directory actually exists and that it contains user-created markdown files
# Time to compile them!

# Initialize /tmp
mkdir -p "/tmp/notes-${$}"
tmpDir="/tmp/notes-${$}"
echo "" > "${tmpDir}/master.md"

# If a user-provided separator is present(in "${DIR}/.separator"), copy that to ${tmpDir}/separator.md.
# If not, just copy the default separator at ${REPO_DIR}/conf/separator.md to ${tmpDir}/separator.md
if [ -f "${DIR}/.separator" ]; then
	cp "${DIR}/.separator" "${tmpDir}/separator.md"
else
	cp "${REPO_DIR}/conf/separator.md" "${tmpDir}/separator.md"
fi

# Populate separatorLength; we'll need it later
separatorLength=`cat "${tmpDir}/separator.md" | wc -l`


## Compile master.md in /tmp ##
IFS="
"
for file in $files
do	
	echo "# `basename "$file" .md`" >> "${tmpDir}/master.md"
	echo "" >> "${tmpDir}/master.md"
	cat "$file" >> "${tmpDir}/master.md"
	cat "${tmpDir}/separator.md" >> "${tmpDir}/master.md"
done
# Now, master.md is built but it has one extra empty line at the beggining and $separatorLength lines of separator at the end
# We need to delete those lines
sed -i '1d' "${tmpDir}/master.md"
for i in $(seq 1 $separatorLength)
do
	sed -i '$d' "${tmpDir}/master.md"
done

# Okay, master.md is fully built
# Now, we need to check if the unit warrants an update
if [ ! -f "${DIR}/master.md" ] || [ ! -z "`diff "${DIR}/master.md" "${tmpDir}/master.md"`" ]; then
	cp "${tmpDir}/master.md" "${DIR}/master.md"
	echo "   Generating master document..."
	pandoc -s -f markdown -o "${DIR}/master.pdf" --latex-engine=pdflatex "${DIR}/master.md"
fi

rm -R "${tmpDir}"
