#!/bin/sh

# Directory of git repo that stores all notes-related files/directories
REPO_DIR="/home/jake/notes"


USAGE () {
	echo "Incorrect usage."
	echo "usage: ugenmaster [--force-all]"
}

# If more than one parameter was passed, exit
if [ "$#" -gt "1" ]; then
	USAGE
	exit -1
fi

FORCE_ALL=0 # Default behavior is to not force rebuilds of the pdfs; this feature probably shouldn't be used unless the way you tell pandoc
            # to generate pdf's changes somehow(like a change of template or something)

# Now that we know there are either 0 or 1 parameters, we have to check them
for parameter in "$@"
do
	if [ "$parameter" == "--force-all" ]; then
		FORCE_ALL=1
	else
		USAGE
		exit -1
	fi
done


# Source file that contains definitions for NOTES_DIR and UNIT_BLACKLIST
if [ -r "${REPO_DIR}/conf/settings.sh" ]; then
	source "${REPO_DIR}/conf/settings.sh"
else
	echo "ERROR: Could not locate configuration settings at ${REPO_DIR}/conf/settings.sh"
	echo "Is \$REPO_DIR set correctly in this script?"
	exit -1
fi


# Store directories recursively
directoryList=`find "$NOTES_DIR" -type d -not -path '*/\.*' -and -not -path "$NOTES_DIR" | sort`

# If no directories were found, quit.
if [ -z "$directoryList" ]; then
	echo "No directories found within ${NOTES_DIR}.  Quitting."
	exit -1
fi

i=0 # Index for creating new array "unitList"
unitList=""

# Set IFS to newline, so that we can iterate over directories that have tabs or spaces in their names
IFS="
"

for dir in $directoryList; do # Iterate over each subdirectory

	# If directory doesn't contain markdown files, continue to next directory
	if [ -z "`ls "$dir" | grep '.md'`" ]; then
		continue
	fi


	# If $dir is equivalent to one of the elements of $UNIT_BLACKLIST, continue to the next iteration of the loop(skip the current value)
	for blacklisted_directory_regex in "${UNIT_BLACKLIST[@]}"; do
		if echo "$dir" | grep -q -E "$blacklisted_directory_regex"; then
			continue 2;
		fi
	done
	
	# Now we know that $dir has markdown files and isn't blacklisted and is correspondingly a unit
	# Now, we add it to a new array called "unitList"
	unitList[i]="$dir"
	i=$(( i+1 ))
done

# Yay! Almost done!

if [ $FORCE_ALL -eq 0 ]; then
	for unit in "${unitList[@]}"; do
		genmaster "$unit"
	done
else
	for unit in "${unitList[@]}"; do
		genmaster --forc --forcee "$unit"
	done
fi
